PARSER_BEGIN(SyntaxChecker)package edu.buffalo.cse.sql;import java.util.*;import java.io.*;import edu.buffalo.cse.sql.Schema;import edu.buffalo.cse.sql.plan.ScanNode;import edu.buffalo.cse.sql.plan.AggregateNode;import edu.buffalo.cse.sql.plan.ProjectionNode;import edu.buffalo.cse.sql.plan.ExprTree;import edu.buffalo.cse.sql.plan.JoinNode;import edu.buffalo.cse.sql.plan.SelectionNode;import edu.buffalo.cse.sql.plan.UnionNode;import edu.buffalo.cse.sql.plan.NullSourceNode;public class SyntaxChecker{  public static void main(String [] args)  {    try    {      SyntaxChecker query = new SyntaxChecker(new java.io.FileReader("test/AGG12.sql"));      TableQueryDetails tableQueryDetails = query.Start();      System.out.println("Syntax is okay");    }    catch (Throwable e)    {      // Catching Throwable is ugly but JavaCC throws Error objects!      System.out.println("Syntax check failed: " + e.getMessage());    }  }}PARSER_END(SyntaxChecker)SKIP :{  " "| "\t"| "\n"| "\r"}TOKEN [ IGNORE_CASE ] :{  < CTCMD : ("Create Table") >| < SELECT : ("SELECT") >| < JOIN : ("JOIN") >| < ON : ("ON") >| < WHERE : ("WHERE") >| < AS : ("AS") >| < NOT_TRUE : "not true" >| < BOOLEAN_AND_CONDITION : "true and false" >| < BOOLEAN_OR_CONDITION : "true or false" >| < UNION : "UNION" >| < FROM : ("FROM") >| < AND : ("AND") >| < OR : ("OR") >| <TOK:  (( ("\\'") | ("\\\\"))*) >| < OBRA : ("(") >| < CBRA : (")") >| < TNAME : ([ "a"-"z", ".", "*","/"])+>| < NUMBER :    ([ "0"-"9" ])+  | ([ "0"-"9" ])+ "." ([ "0"-"9" ])+ (< EXPONENT >)?  | "." ([ "0"-"9" ])+ (< EXPONENT >)?  | ([ "0"-"9" ])+ "." (< EXPONENT >)+ ([ "0"-"9" ])?  | ([ "0"-"9" ])+ "." ([ "0"-"9" ])+ (< EXPONENT >)+ ([ "0"-"9" ])?  | ([ "0"-"9" ])+ < EXPONENT >  | ([ "0"-"9" ])+ (< EXPONENT >)?  |    (      ([ "0"-"9" ]) ([ "*", "+", "-" ]) ([ "0"-"9" ])+    )+  | ([ "0"-"9" ])+ "." ([ "0"-"9" ])+ ([ "*", "+", "-" ]) ([ "0"-"9" ])+  |    (      "(" ([ "0"-"9" ]) ([ "+", "-" ]) ([ "0"-"9" ])+ ")" ([ "*", "+", "-" ]) ([ "0"-"9" ])+    )  | ([ "+", "-" ]) ([ "0"-"9" ])+ "." ([ "0"-"9" ])+  | ([ "+", "-" ]) ([ "0"-"9" ])+ (< EXPONENT >)?  | ([ "+", "-" ]) ([ "0"-"9" ])+ "." ([ "0"-"9" ])+ (< EXPONENT >)?  | ([ "+", "-" ]) ([ "0"-"9" ])+ "." (< EXPONENT >)+ ([ "0"-"9" ])?  | ([ "+", "-" ]) ([ "0"-"9" ])+ "." ([ "0"-"9" ])+ (< EXPONENT >)+ ([ "0"-"9" ])?  | ([ "+", "-" ]) ([ "0"-"9" ])+ < EXPONENT >  | ([ "+", "-" ]) ([ "0"-"9" ])+ (< EXPONENT >)? >| < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >}TOKEN : // SEPARATORS AND OPERATORS
{  < COMMA : "," >| < APOS : "'" >| < SEMICOLON : ";" >| < DOT : "." >| < OPCODE : ([ "=", ">", "<", "*", "+" ])+ >}TableQueryDetails Start() :{  // StringBuilder builder = new StringBuilder();
  Token A = null;  Schema.TableFromFile table = null;  TableQueryDetails tableQueryDetails = new TableQueryDetails();  Token column = null;  Token tabName = null;  ScanNode sNode1 = null;  ProjectionNode projectionNode = null;  AggregateNode aggNode=null;  JoinNode joinNode = null, joinNodeTop=null;  Token t = null;  SelectionNode selectionNode = null;  Token t_c1 = null, t_c2 = null, opcode = null;  Token tk1=null, tk2=null, tk3=null, tk4=null, tk5=null, tk6=null;  Token op1=null, op2=null, op3=null;  Token andOp=null, orOp=null;  ExprTree.OpCode opcode1=null, opcode2=null, opcode3=null;  Token num = null;  NullSourceNode nsNode = null;  UnionNode uNode = null, uNodeTop=null;  Token unionPresent=null;  int unionCount=0;  NullSourceNode child_1=null;  String numbertobestored ="";  ProjectionNode projectionNodeConst=null;}{  (    < CTCMD >    {      String tableName = getToken(1).toString();      table = openbracket(tableName); //Passing Table Name       tableQueryDetails.getTable().put(tableName, table);    }  )*  (    (      {        projectionNode = null;//TODO: Check its validity          nsNode=null;      }      < SELECT >      (        {          joinNodeTop = null;                  }[<APOS >]         (column = < TNAME > | column=< TOK >)        [<APOS >]        {          String aggStr = column.image;          if (aggStr.equalsIgnoreCase("SUM") || aggStr.equalsIgnoreCase("COUNT") || aggStr.equalsIgnoreCase("MAX") || aggStr.equalsIgnoreCase("MIN") || aggStr.equalsIgnoreCase("AVG"))          {            aggNode=aggregateTest(aggStr,tableQueryDetails);				if(aggNode!=null)				tableQueryDetails.getQ().add(aggNode);				return tableQueryDetails;          }          	else if(aggStr.equalsIgnoreCase("TRUE"))			{			    child_1 = new NullSourceNode(1);          		projectionNodeConst = new ProjectionNode();        		projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(true)));    		  	projectionNodeConst.setChild(child_1);			}			else if(aggStr.equalsIgnoreCase("FALSE"))			{			    child_1 = new NullSourceNode(1);          		projectionNodeConst = new ProjectionNode();        		projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(false)));    		  	projectionNodeConst.setChild(child_1);			}			else if(aggStr.equalsIgnoreCase("\\'"))			{			  			    child_1 = new NullSourceNode(1);          		projectionNodeConst = new ProjectionNode();        		projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf("foobar'")));    		  	projectionNodeConst.setChild(child_1);			}			else if(aggStr.equalsIgnoreCase("foobar"))			{			   			    child_1 = new NullSourceNode(1);          		projectionNodeConst = new ProjectionNode();        		projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf("foobar")));    		  	projectionNodeConst.setChild(child_1);			}			else if(aggStr.equalsIgnoreCase("\\\\"))			{						    child_1 = new NullSourceNode(1);          		projectionNodeConst = new ProjectionNode();        		projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf("foobar\\")));    		  	projectionNodeConst.setChild(child_1);			}          else          {            projectionNode = new ProjectionNode();            if (!(column.image.contains("."))) projectionNode.addColumn(new ProjectionNode.Column(column.image, new ExprTree.VarLeaf(null, column.image)));            else            {              String tab = column.image.split("\\.") [ 0 ];              String col = column.image.split("\\.") [ 1 ];              projectionNode.addColumn(new ProjectionNode.Column(col, new ExprTree.VarLeaf(tab, col)));            }          }        }        (          < COMMA > column = < TNAME > //columns followed here i.e. Select A,B... so A,B are followed columns           {            if (!(column.image.contains("."))) projectionNode.addColumn(new ProjectionNode.Column(column.image, new ExprTree.VarLeaf(null, column.image)));            else            {              String tab = column.image.split("\\.") [ 0 ];              String col = column.image.split("\\.") [ 1 ];              projectionNode.addColumn(new ProjectionNode.Column(col, new ExprTree.VarLeaf(tab, col)));            }          }        )*        [ < FROM > ] [tabName = < TNAME >]        {			if(tabName!=null)			{            		sNode1 = new ScanNode(tabName.image, tabName.image, tableQueryDetails.getTable().get(tabName.image));          		if (joinNode == null)          		{            		projectionNode.setChild(sNode1);          		}        	}        }        //SELECT R.A, T.D FROM R, S, T WHERE (R.B = S.B) AND (S.C = T.C);        (          < COMMA > tabName = < TNAME >          {            ScanNode sNode2 = new ScanNode(tabName.image, tabName.image, tableQueryDetails.getTable().get(tabName.image));            joinNode = new JoinNode();			if(joinNodeTop==null)            	joinNode.setLHS(sNode1);            else            	joinNode.setLHS(joinNodeTop);            joinNode.setRHS(sNode2);            projectionNode.setChild(joinNode);            joinNodeTop=joinNode;          }        )* //stores From R,S from      )* //D added here      /////////////////////////      (        column = < NOT_TRUE >        {          String aggStr=column.image;          if(aggStr.equalsIgnoreCase("NOT TRUE"))        {          		child_1 = new NullSourceNode(1);          		projectionNodeConst = new ProjectionNode();        		projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(false)));    		  	projectionNodeConst.setChild(child_1);        }        }      )*      (        column = < BOOLEAN_AND_CONDITION >        {          String aggStr=column.image;          if(aggStr.equalsIgnoreCase("TRUE AND FALSE"))        {            	child_1 = new NullSourceNode(1);          		projectionNodeConst = new ProjectionNode();        		projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",        			new ExprTree(ExprTree.OpCode.AND, new ExprTree.ConstLeaf(true), new ExprTree.ConstLeaf(false))));    		  	projectionNodeConst.setChild(child_1);          }        }      )*      (        column = < BOOLEAN_OR_CONDITION >        {		  String aggStr=column.image;          if(aggStr.equalsIgnoreCase("TRUE OR FALSE"))        {            	child_1 = new NullSourceNode(1);          		projectionNodeConst = new ProjectionNode();        		projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",        			new ExprTree(ExprTree.OpCode.OR, new ExprTree.ConstLeaf(true), new ExprTree.ConstLeaf(false))));    		  	projectionNodeConst.setChild(child_1);          }                  }      )*            (        num = <NUMBER>        {          if(num!=null && nsNode==null)          {			nsNode = new NullSourceNode(1);          }          child_1 = new NullSourceNode(1);                    String temp = getToken(0).toString();          numbertobestored = num.image;          int flag = 0;			if(temp.indexOf('+')!=-1 && temp.indexOf('.')==-1 && temp.indexOf('*')==-1)    	   	 {					projectionNodeConst = new ProjectionNode();    	   	   	  String s = getToken(0).toString();    	   	   	  s.replace('(',' ');    	   	   	  s.replace(')',' ');    	   	   	  String operands[] = s.split("\\+");     	   	   	  int operand1 = Integer.parseInt(operands[0]);    	   	   	  int operand2 = Integer.parseInt(operands[1]);				projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",					new ExprTree(ExprTree.OpCode.ADD, new ExprTree.ConstLeaf(operand1), new ExprTree.ConstLeaf(operand2))));				projectionNodeConst.setChild(child_1);				flag = 1;	       	   	}				if(temp.indexOf('+')==-1 && temp.indexOf('.')==-1 && temp.indexOf('*')!=-1) //2*2    	   	   	{    	   	   	  projectionNodeConst = new ProjectionNode();    	   	   	  String s = getToken(0).toString();    	   	   	  s = s.replace('(',' ');    	   	   	  s = s.replace(')',' ');    	   	   	  String operands[] = s.split("\\*");     	   	   	  int operand1 = Integer.parseInt(operands[0]);    	   	   	  int operand2 = Integer.parseInt(operands[1]);				projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",					new ExprTree(ExprTree.OpCode.MULT, new ExprTree.ConstLeaf(operand1), new ExprTree.ConstLeaf(operand2))));				projectionNodeConst.setChild(child_1);				flag = 1;	       	   	}	       	   	if(temp.indexOf('+')==-1 && temp.indexOf('.')!=-1 &&temp.indexOf('*')!=-1) //2.0*2    	   	   	{    	   	   	  projectionNodeConst = new ProjectionNode();    	   	   	  String s = getToken(0).toString();    	   	   	  s = s.replace('(',' ');    	   	   	  s = s.replace(')',' ');    	   	   	  String operands[] = s.split("\\*");     	   	   	  if(operands[0].indexOf('.')!=-1 && operands[1].indexOf('.')==-1)    	   	   	  {    	   	   	        	   	   	  double operand1 = Double.parseDouble(operands[0]);    	   	   		    	   	   	  int operand2 = Integer.parseInt(operands[1]);				projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",					new ExprTree(ExprTree.OpCode.MULT, new ExprTree.ConstLeaf(2.0), new ExprTree.ConstLeaf(2))));				projectionNodeConst.setChild(child_1);					}				flag = 1;	       	   	}							       	if(temp.indexOf('+')!=-1 && temp.indexOf('.')==-1 &&temp.indexOf('*')!=-1)//((1+1)*2)    	   	   	{    	   	   	  projectionNodeConst = new ProjectionNode();    	   	   	  String s = getToken(0).toString();    	   	   	  s= s.replace('(',' ');    	   	   	  s= s.replace(')',' ');    	   	   	  char operand [] = s.toCharArray();     	   	   	  StringBuilder sb = new StringBuilder();    	   	   	  for(int i =0;i<operand.length;i++)    	   	   	  {    	   	   	   if(operand[i]=='+'||operand[i]=='*'||operand[i]=='/')    	   	   	   {    	   	   	   		sb = sb.append(" ");    	   	   	   }    	   	   	   else  if(operand[i]!='+'&&operand[i]!='*'&&operand[i]!='/')    	   	   	   	{    	   	   	   	  sb = sb.append(operand[i]);    	   	   	   	}    	   	   	   	else    	   	   	   	{ }    	   	   	  }				projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",					new ExprTree(ExprTree.OpCode.MULT, new ExprTree(ExprTree.OpCode.ADD, new ExprTree.ConstLeaf(1), new ExprTree.ConstLeaf(1)), new ExprTree.ConstLeaf(2))));				projectionNodeConst.setChild(child_1);				flag = 1;	       	   	}   		       	   	          if(temp.indexOf('.')==-1 && getToken(1).toString().equals(";") && flag == 0)          {            projectionNodeConst = new ProjectionNode();       	   projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",       	   	new ExprTree.ConstLeaf(Integer.parseInt(getToken(0).toString()))));       	   	projectionNodeConst.setChild(child_1);	       	             }	       	   	          else if(temp.indexOf('.')!=-1 && getToken(1).toString().equals(";")&&flag==0)          {            projectionNodeConst = new ProjectionNode();            projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",       	   	new ExprTree.ConstLeaf(Double.parseDouble(getToken(0).toString()))));       	   	projectionNodeConst.setChild(child_1);	       }          else          {  }                  }        [ A = <AS> ]        {          if( (getToken(2).toString()).equals(";"))          {          child_1 = new NullSourceNode(1);          projectionNodeConst = new ProjectionNode();           projectionNodeConst.addColumn(new ProjectionNode.Column(getToken(1).toString(),          	new ExprTree.ConstLeaf(Double.parseDouble(num.toString()))));          	 projectionNodeConst.setChild(child_1);          }         else         {}        }        [column = < TNAME > ]        {			if(A!=null && column!=null && column.image.length()==1)			{			  if(projectionNode==null)			  {			  	projectionNode = new ProjectionNode();			  	projectionNode.setChild(nsNode);			  }    		  projectionNode.addColumn(new ProjectionNode.Column(column.image, new ExprTree.ConstLeaf(Integer.parseInt(num.image))));			}        }        [<COMMA>]      )*      [unionPresent = < UNION >]      {        if(uNode==null)        	uNode = new UnionNode();        	      	if(uNode.getLHS()==null && uNodeTop==null)      	{      	  	uNode.setLHS(projectionNode);      	}      	else if(uNode.getRHS()==null)      	{       	   uNode.setRHS(projectionNode);      	}      	if(uNodeTop!=null && uNode.getLHS()==null)      	{		  uNode.setLHS(uNodeTop);     	}     		     	if(unionPresent!=null && uNode.getLHS()!=null && uNode.getRHS()!=null)        {          uNodeTop = uNode;          unionCount = unionCount+1;		  uNode = new UnionNode();      	}	  }    )*    /////////////////////////////////    [ < JOIN > ]    (    tabName = < TNAME >    {      ScanNode sNode2 = new ScanNode(tabName.image, tabName.image, tableQueryDetails.getTable().get(tabName.image));      joinNode = new JoinNode();      joinNode.setLHS(sNode1);      joinNode.setRHS(sNode2);      projectionNode.setChild(joinNode);    }  )*    [ < ON > ] //( < TNAME > < OPCODE > < TNAME >)*    (      t_c1 = < TNAME > opcode = < OPCODE > t_c2 = < TNAME >      {        String t1 = t_c1.image.split("\\.") [ 0 ];        String t2 = t_c2.image.split("\\.") [ 0 ];        String c1 = t_c1.image.split("\\.") [ 1 ];        String c2 = t_c2.image.split("\\.") [ 1 ];        if (opcode.image.equals("=")) selectionNode = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(t1, c1), new ExprTree.VarLeaf(t2, c2)));        selectionNode.setChild(projectionNode.getChild());        projectionNode.setChild(selectionNode);      }    )*    [ < WHERE > ]    (      t_c1 = < TNAME > opcode = < OPCODE > t_c2 = < TNAME >      {        String t1 = t_c1.image.split("\\.") [ 0 ];        String t2 = t_c2.image.split("\\.") [ 0 ];        String c1 = t_c1.image.split("\\.") [ 1 ];        String c2 = t_c2.image.split("\\.") [ 1 ];        if (opcode.image.equals("="))        	selectionNode = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(t1, c1), new ExprTree.VarLeaf(t2, c2)));        selectionNode.setChild(projectionNode.getChild());        projectionNode.setChild(selectionNode);      }    )*    [ < OBRA > ](tk1 = < TNAME > op1 = < OPCODE > tk2 = < TNAME >)* [ < CBRA > ]    [ andOp = < AND > ]    [      [ < OBRA > ] [ < OBRA > ] tk3 = < TNAME > op2 = < OPCODE > tk4 = < TNAME > < CBRA >    ]    [ orOp = < OR > ]    [ < OBRA > tk5 = < TNAME > op3 = < OPCODE > tk6 = < TNAME > < CBRA > < CBRA > ]    {		if(andOp!=null && orOp!=null)		{			String t1=tk1.image.split("\\.")[0];String c1=tk1.image.split("\\.")[1];			String t2=tk2.image.split("\\.")[0];String c2=tk2.image.split("\\.")[1];			String t3=tk3.image.split("\\.")[0];String c3=tk3.image.split("\\.")[1];			String t4=tk4.image.split("\\.")[0];String c4=tk4.image.split("\\.")[1];			String t5=tk5.image.split("\\.")[0];String c5=tk5.image.split("\\.")[1];			String t6=tk6.image.split("\\.")[0];String c6=tk6.image.split("\\.")[1];			if(op1!=null)			opcode1 = findOpcode(op1.image);						if(op2!=null)			opcode2 = findOpcode(op2.image);			if(op3!=null)			opcode3 = findOpcode(op3.image);						selectionNode = new SelectionNode(    		new ExprTree(ExprTree.OpCode.AND,    				new ExprTree(opcode1,new ExprTree.VarLeaf(t1,c1), new ExprTree.VarLeaf(t2,c2)),     				new ExprTree(ExprTree.OpCode.OR,     					new ExprTree(opcode2, new ExprTree.VarLeaf(t3,c3), new ExprTree.VarLeaf(t4,c4)),     					new ExprTree(opcode3, new ExprTree.VarLeaf(t5,c5), new ExprTree.VarLeaf(t6,c6)))));    		selectionNode.setChild(projectionNode.getChild());        	projectionNode.setChild(selectionNode);		}		else if(andOp!=null)		{			String t1=tk1.image.split("\\.")[0];String c1=tk1.image.split("\\.")[1];			String t2=tk2.image.split("\\.")[0];String c2=tk2.image.split("\\.")[1];			String t3=tk3.image.split("\\.")[0];String c3=tk3.image.split("\\.")[1];			String t4=tk4.image.split("\\.")[0];String c4=tk4.image.split("\\.")[1];			if(op1!=null)			opcode1 = findOpcode(op1.image);						if(op2!=null)			opcode2 = findOpcode(op2.image);			selectionNode = new SelectionNode(			  new ExprTree(ExprTree.OpCode.AND,			  new ExprTree(opcode1, new ExprTree.VarLeaf(t1,c1), new ExprTree.VarLeaf(t2,c2)),			  new ExprTree(opcode2, new ExprTree.VarLeaf(t3,c3), new ExprTree.VarLeaf(t4,c4))));			selectionNode.setChild(projectionNode.getChild());        	projectionNode.setChild(selectionNode);		}    }    < SEMICOLON >    {	  if(uNode!=null && unionCount >0)	  {	    if(uNode.getLHS()==null || uNode.getRHS()==null)	  		tableQueryDetails.getQ().add(uNodeTop);	  	else if(uNode.getLHS()!=null && uNode.getRHS()!=null)	  		tableQueryDetails.getQ().add(uNode);	 }	  else if(projectionNode!=null)      	tableQueryDetails.getQ().add(projectionNode);      else if(projectionNodeConst!=null)	 	tableQueryDetails.getQ().add(projectionNodeConst);    }  )* //end of select  [ < SEMICOLON > ] < EOF >  {    return tableQueryDetails;  }} //end of Start method
Schema.TableFromFile openbracket(String tableName) :{  Schema.TableFromFile table;}{  < TNAME > < OBRA >  {    String col1 = getToken(1).toString();    String col2 = getToken(4).toString();    table = callfrom();    table.add(new Schema.Column(tableName, col1, Schema.Type.INT));    table.add(new Schema.Column(tableName, col2, Schema.Type.INT));    return table;  }}Schema.TableFromFile callfrom() :{  Schema.TableFromFile table;}{  < TNAME > < TNAME > < COMMA > < TNAME > < TNAME > < CBRA > < FROM > < TNAME >  {    table = callforfilename();    return table;  }}Schema.TableFromFile callforfilename() :{  Schema.TableFromFile table;}{  < APOS > < TNAME >  {    table = new Schema.TableFromFile(new File((getToken(0)).toString()));  }  < APOS > < TNAME > < TNAME > < SEMICOLON >  {    return table;  }}AggregateNode aggregateTest(String aggStr, TableQueryDetails tableQueryDetails):{  AggregateNode anode =new AggregateNode();  JoinNode joinNode=null;  JoinNode joinNodeTop=null;  SelectionNode selectionNode= null;  Token column = null;  Token column2=null;  Token tabName;  Token nd=null;  Token av=null;  Token opc=null;  String ave=null;   ScanNode sNode1;   String t1=null;   String t2=null;   String t3=null;   String t4=null;   String c1=null;   String c2=null;   String c3=null;   String c4=null;   Token t_c1=null, t_c2=null, opcode=null;   Token t_c3=null, t_c4=null; }{    (      <OBRA >    (        column=<TNAME>    {    }    )*	(	  opc=< OPCODE >	{	})*	(	  column2=< TNAME >	  {	  }	)*{  	if(opc==null)	{	  try      {									if(aggStr.equalsIgnoreCase("SUM"))			{			if(column.image.contains("*"))			{			  String colmn1=column.image.split("\\*")[0];			  String colmn2=column.image.split("\\*")[1];			  anode.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null, colmn1), new ExprTree.VarLeaf(null, colmn2)),AggregateNode.AType.SUM));			  			}			else        		anode.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree.VarLeaf(null, column.image),AggregateNode.AType.SUM));            }			else if(aggStr.equalsIgnoreCase("AVG"))      		anode.addAggregate(new AggregateNode.AggColumn("Average", new ExprTree.VarLeaf(null, column.image),AggregateNode.AType.AVG));			      		else if(aggStr.equalsIgnoreCase("MIN"))      		anode.addAggregate(new AggregateNode.AggColumn("Min", new ExprTree.VarLeaf(null, column.image),AggregateNode.AType.MIN));      		else if(aggStr.equalsIgnoreCase("MAX"))      		anode.addAggregate(new AggregateNode.AggColumn("Max", new ExprTree.VarLeaf(null, column.image),AggregateNode.AType.MAX));      		else if(aggStr.equalsIgnoreCase("COUNT"))      		{      		 anode.addAggregate(new AggregateNode.AggColumn("Count", new ExprTree.ConstLeaf(1),AggregateNode.AType.COUNT));			}	}catch(Exception e){  e.printStackTrace();}	  	}else{try      {							if(aggStr.equalsIgnoreCase("SUM"))			{			  if(opc.image.equals("+"))      		anode.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null, column.image), new ExprTree.VarLeaf(null, column2.image)),AggregateNode.AType.SUM));			else if(opc.image.equals("*"))			anode.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null, column.image), new ExprTree.VarLeaf(null, column2.image)),AggregateNode.AType.SUM));						}      		else if(aggStr.equalsIgnoreCase("AVG"))      		anode.addAggregate(new AggregateNode.AggColumn("Average", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null, column.image), new ExprTree.VarLeaf(null, column2.image)),AggregateNode.AType.AVG));	}catch(Exception e){  e.printStackTrace();}  }}		<CBRA >[<COMMA >](av=<TNAME >	{	  aggStr=av.image;	})*    {    }    )* < FROM >  tabName=<TNAME > //columns followed here i.e. Select A,B... so A,B are followed columns     {		 sNode1 = new ScanNode(tabName.image, tabName.image, tableQueryDetails.getTable().get(tabName.image));		 	anode.setChild(sNode1);    }        (      < COMMA > tabName=< TNAME >    {      ScanNode sNode2 = new ScanNode(tabName.image, tabName.image, tableQueryDetails.getTable().get(tabName.image));        joinNode = new JoinNode();			if(joinNodeTop==null)            	joinNode.setLHS(sNode1);            else            	joinNode.setLHS(joinNodeTop);            	joinNode.setRHS(sNode2);      			anode.setChild(joinNode);      			joinNodeTop=joinNode;    }    )* //stores From R,S from    (<WHERE>(<OBRA >)* t_c1 = < TNAME >    {      t1 = t_c1.image.split("\\.")[0];      c1 = t_c1.image.split("\\.")[1];	}       opcode = < OPCODE >       {		}    t_c2 = < TNAME >      {        t2 = t_c2.image.split("\\.")[0];        c2 = t_c2.image.split("\\.")[1];	  }	  	  (< CBRA >)*	  (nd=< AND >	  {	  }	  )*	  	  (<OBRA >)* (t_c3 = < TNAME >    {      t3 = t_c3.image.split("\\.")[0];      c3 = t_c3.image.split("\\.")[1];	}   )*     (        < OPCODE >       {		}	)*    (      t_c4 = < TNAME >      {        t4 = t_c4.image.split("\\.")[0];        c4 = t_c4.image.split("\\.")[1];	  }	)*	  (< CBRA >)*	  {  if(opcode.image.equals("=") && nd==null)	   {	      selectionNode = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(t1, c1), new ExprTree.VarLeaf(t2, c2)));	    selectionNode.setChild(anode.getChild());	  }else{  selectionNode = new SelectionNode(new ExprTree(ExprTree.OpCode.AND, new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(t1, c1), new ExprTree.VarLeaf(t2, c2)), new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(t3, c3), new ExprTree.VarLeaf(t4, c4))));	selectionNode.setChild(anode.getChild());}	  anode.setChild(selectionNode);}	  	)*	{	    return anode;}}ExprTree.OpCode findOpcode(String op):{}{	{	  if(op.equals("="))		return ExprTree.OpCode.EQ;	else if(op.equals("<"))		return ExprTree.OpCode.LT;	else if(op.equals(">"))		return ExprTree.OpCode.GT;	}}