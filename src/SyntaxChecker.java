/* Generated By:JavaCC: Do not edit this line. SyntaxChecker.java */
package edu.buffalo.cse.sql;
import java.util.*;
import java.io.*;
import edu.buffalo.cse.sql.Schema;
import edu.buffalo.cse.sql.plan.ScanNode;
import edu.buffalo.cse.sql.plan.AggregateNode;
import edu.buffalo.cse.sql.plan.ProjectionNode;
import edu.buffalo.cse.sql.plan.ExprTree;
import edu.buffalo.cse.sql.plan.JoinNode;
import edu.buffalo.cse.sql.plan.SelectionNode;
import edu.buffalo.cse.sql.plan.UnionNode;
import edu.buffalo.cse.sql.plan.NullSourceNode;
public class SyntaxChecker implements SyntaxCheckerConstants {
  public static void main(String [] args)
  {
    try
    {
      SyntaxChecker query = new SyntaxChecker(new java.io.FileReader("test/AGG12.sql"));
      TableQueryDetails tableQueryDetails = query.Start();
      System.out.println("Syntax is okay");
    }
    catch (Throwable e)
    {
      // Catching Throwable is ugly but JavaCC throws Error objects!      System.out.println("Syntax check failed: " + e.getMessage());
    }
  }

  static final public TableQueryDetails Start() throws ParseException {
  // StringBuilder builder = new StringBuilder();
  Token A = null;
  Schema.TableFromFile table = null;
  TableQueryDetails tableQueryDetails = new TableQueryDetails();
  Token column = null;
  Token tabName = null;
  ScanNode sNode1 = null;
  ProjectionNode projectionNode = null;
  AggregateNode aggNode=null;
  JoinNode joinNode = null, joinNodeTop=null;
  Token t = null;
  SelectionNode selectionNode = null;
  Token t_c1 = null, t_c2 = null, opcode = null;
  Token tk1=null, tk2=null, tk3=null, tk4=null, tk5=null, tk6=null;
  Token op1=null, op2=null, op3=null;
  Token andOp=null, orOp=null;
  ExprTree.OpCode opcode1=null, opcode2=null, opcode3=null;
  Token num = null;
  NullSourceNode nsNode = null;
  UnionNode uNode = null, uNodeTop=null;
  Token unionPresent=null;
  int unionCount=0;
  NullSourceNode child_1=null;
  String numbertobestored ="";
  ProjectionNode projectionNodeConst=null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CTCMD:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(CTCMD);
      String tableName = getToken(1).toString();
      table = openbracket(tableName); //Passing Table Name 
      tableQueryDetails.getTable().put(tableName, table);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
      case JOIN:
      case ON:
      case WHERE:
      case AND:
      case OR:
      case OBRA:
      case CBRA:
      case TNAME:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SELECT:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        projectionNode = null;//TODO: Check its validity
          nsNode=null;
        jj_consume_token(SELECT);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TOK:
          case TNAME:
          case APOS:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
          joinNodeTop = null;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case APOS:
            jj_consume_token(APOS);
            break;
          default:
            jj_la1[4] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TNAME:
            column = jj_consume_token(TNAME);
            break;
          case TOK:
            column = jj_consume_token(TOK);
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case APOS:
            jj_consume_token(APOS);
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          String aggStr = column.image;
          if (aggStr.equalsIgnoreCase("SUM") || aggStr.equalsIgnoreCase("COUNT") || aggStr.equalsIgnoreCase("MAX") || aggStr.equalsIgnoreCase("MIN") || aggStr.equalsIgnoreCase("AVG"))
          {
            aggNode=aggregateTest(aggStr,tableQueryDetails);
                                if(aggNode!=null)
                                tableQueryDetails.getQ().add(aggNode);

                                {if (true) return tableQueryDetails;}

          }
                else if(aggStr.equalsIgnoreCase("TRUE"))
                        {
                            child_1 = new NullSourceNode(1);
                        projectionNodeConst = new ProjectionNode();
                        projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(true)));
                        projectionNodeConst.setChild(child_1);
                        }

                        else if(aggStr.equalsIgnoreCase("FALSE"))
                        {
                            child_1 = new NullSourceNode(1);
                        projectionNodeConst = new ProjectionNode();
                        projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(false)));
                        projectionNodeConst.setChild(child_1);
                        }
                        else if(aggStr.equalsIgnoreCase("\u005c\u005c'"))
                        {

                            child_1 = new NullSourceNode(1);
                        projectionNodeConst = new ProjectionNode();
                        projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf("foobar'")));
                        projectionNodeConst.setChild(child_1);
                        }
                        else if(aggStr.equalsIgnoreCase("foobar"))
                        {

                            child_1 = new NullSourceNode(1);
                        projectionNodeConst = new ProjectionNode();
                        projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf("foobar")));
                        projectionNodeConst.setChild(child_1);
                        }
                        else if(aggStr.equalsIgnoreCase("\u005c\u005c\u005c\u005c"))
                        {

                            child_1 = new NullSourceNode(1);
                        projectionNodeConst = new ProjectionNode();
                        projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf("foobar\u005c\u005c")));
                        projectionNodeConst.setChild(child_1);
                        }
          else
          {
            projectionNode = new ProjectionNode();
            if (!(column.image.contains("."))) projectionNode.addColumn(new ProjectionNode.Column(column.image, new ExprTree.VarLeaf(null, column.image)));
            else
            {
              String tab = column.image.split("\u005c\u005c.") [ 0 ];
              String col = column.image.split("\u005c\u005c.") [ 1 ];
              projectionNode.addColumn(new ProjectionNode.Column(col, new ExprTree.VarLeaf(tab, col)));
            }
          }
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[7] = jj_gen;
              break label_5;
            }
            jj_consume_token(COMMA);
            column = jj_consume_token(TNAME);
            if (!(column.image.contains("."))) projectionNode.addColumn(new ProjectionNode.Column(column.image, new ExprTree.VarLeaf(null, column.image)));
            else
            {
              String tab = column.image.split("\u005c\u005c.") [ 0 ];
              String col = column.image.split("\u005c\u005c.") [ 1 ];
              projectionNode.addColumn(new ProjectionNode.Column(col, new ExprTree.VarLeaf(tab, col)));
            }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FROM:
            jj_consume_token(FROM);
            break;
          default:
            jj_la1[8] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TNAME:
            tabName = jj_consume_token(TNAME);
            break;
          default:
            jj_la1[9] = jj_gen;
            ;
          }
                        if(tabName!=null)
                        {
                        sNode1 = new ScanNode(tabName.image, tabName.image, tableQueryDetails.getTable().get(tabName.image));
                        if (joinNode == null)
                        {
                        projectionNode.setChild(sNode1);
                        }
                }
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[10] = jj_gen;
              break label_6;
            }
            jj_consume_token(COMMA);
            tabName = jj_consume_token(TNAME);
            ScanNode sNode2 = new ScanNode(tabName.image, tabName.image, tableQueryDetails.getTable().get(tabName.image));
            joinNode = new JoinNode();
                        if(joinNodeTop==null)
                joinNode.setLHS(sNode1);
            else
                joinNode.setLHS(joinNodeTop);
            joinNode.setRHS(sNode2);
            projectionNode.setChild(joinNode);
            joinNodeTop=joinNode;
          }
        }
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOT_TRUE:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_7;
          }
          column = jj_consume_token(NOT_TRUE);
          String aggStr=column.image;
          if(aggStr.equalsIgnoreCase("NOT TRUE"))
        {
                        child_1 = new NullSourceNode(1);
                        projectionNodeConst = new ProjectionNode();
                        projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(false)));
                        projectionNodeConst.setChild(child_1);
        }
        }
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN_AND_CONDITION:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_8;
          }
          column = jj_consume_token(BOOLEAN_AND_CONDITION);
          String aggStr=column.image;
          if(aggStr.equalsIgnoreCase("TRUE AND FALSE"))
        {
                child_1 = new NullSourceNode(1);
                        projectionNodeConst = new ProjectionNode();
                        projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",
                                new ExprTree(ExprTree.OpCode.AND, new ExprTree.ConstLeaf(true), new ExprTree.ConstLeaf(false))));
                        projectionNodeConst.setChild(child_1);
          }
        }
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN_OR_CONDITION:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_9;
          }
          column = jj_consume_token(BOOLEAN_OR_CONDITION);
                  String aggStr=column.image;
          if(aggStr.equalsIgnoreCase("TRUE OR FALSE"))
        {
                child_1 = new NullSourceNode(1);
                        projectionNodeConst = new ProjectionNode();
                        projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",
                                new ExprTree(ExprTree.OpCode.OR, new ExprTree.ConstLeaf(true), new ExprTree.ConstLeaf(false))));
                        projectionNodeConst.setChild(child_1);
          }
        }
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMBER:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_10;
          }
          num = jj_consume_token(NUMBER);
          if(num!=null && nsNode==null)
          {
                        nsNode = new NullSourceNode(1);
          }
          child_1 = new NullSourceNode(1);

          String temp = getToken(0).toString();
          numbertobestored = num.image;
          int flag = 0;
                        if(temp.indexOf('+')!=-1 && temp.indexOf('.')==-1 && temp.indexOf('*')==-1)
                 {
                                        projectionNodeConst = new ProjectionNode();
                          String s = getToken(0).toString();
                          s.replace('(',' ');
                          s.replace(')',' ');
                          String operands[] = s.split("\u005c\u005c+");
                          int operand1 = Integer.parseInt(operands[0]);
                          int operand2 = Integer.parseInt(operands[1]);
                                projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",
                                        new ExprTree(ExprTree.OpCode.ADD, new ExprTree.ConstLeaf(operand1), new ExprTree.ConstLeaf(operand2))));
                                projectionNodeConst.setChild(child_1);
                                flag = 1;
                        }

                                if(temp.indexOf('+')==-1 && temp.indexOf('.')==-1 && temp.indexOf('*')!=-1) //2*2
                        {
                          projectionNodeConst = new ProjectionNode();
                          String s = getToken(0).toString();
                          s = s.replace('(',' ');
                          s = s.replace(')',' ');
                          String operands[] = s.split("\u005c\u005c*");
                          int operand1 = Integer.parseInt(operands[0]);
                          int operand2 = Integer.parseInt(operands[1]);
                                projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",
                                        new ExprTree(ExprTree.OpCode.MULT, new ExprTree.ConstLeaf(operand1), new ExprTree.ConstLeaf(operand2))));
                                projectionNodeConst.setChild(child_1);
                                flag = 1;
                        }

                        if(temp.indexOf('+')==-1 && temp.indexOf('.')!=-1 &&temp.indexOf('*')!=-1) //2.0*2
                        {
                          projectionNodeConst = new ProjectionNode();
                          String s = getToken(0).toString();
                          s = s.replace('(',' ');
                          s = s.replace(')',' ');
                          String operands[] = s.split("\u005c\u005c*");
                          if(operands[0].indexOf('.')!=-1 && operands[1].indexOf('.')==-1)
                          {
                          double operand1 = Double.parseDouble(operands[0]);

                          int operand2 = Integer.parseInt(operands[1]);
                                projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",
                                        new ExprTree(ExprTree.OpCode.MULT, new ExprTree.ConstLeaf(2.0), new ExprTree.ConstLeaf(2))));
                                projectionNodeConst.setChild(child_1);
                                        }
                                flag = 1;
                        }


                if(temp.indexOf('+')!=-1 && temp.indexOf('.')==-1 &&temp.indexOf('*')!=-1)//((1+1)*2)
                        {
                          projectionNodeConst = new ProjectionNode();
                          String s = getToken(0).toString();
                          s= s.replace('(',' ');
                          s= s.replace(')',' ');
                          char operand [] = s.toCharArray();
                          StringBuilder sb = new StringBuilder();
                          for(int i =0;i<operand.length;i++)
                          {
                           if(operand[i]=='+'||operand[i]=='*'||operand[i]=='/')
                           {
                                        sb = sb.append(" ");
                           }
                           else  if(operand[i]!='+'&&operand[i]!='*'&&operand[i]!='/')
                                {
                                  sb = sb.append(operand[i]);
                                }
                                else
                                { }
                          }
                                projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",
                                        new ExprTree(ExprTree.OpCode.MULT, new ExprTree(ExprTree.OpCode.ADD, new ExprTree.ConstLeaf(1), new ExprTree.ConstLeaf(1)), new ExprTree.ConstLeaf(2))));
                                projectionNodeConst.setChild(child_1);
                                flag = 1;
                        }

          if(temp.indexOf('.')==-1 && getToken(1).toString().equals(";") && flag == 0)
          {
            projectionNodeConst = new ProjectionNode();
           projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",
                new ExprTree.ConstLeaf(Integer.parseInt(getToken(0).toString()))));
                projectionNodeConst.setChild(child_1);

          }


          else if(temp.indexOf('.')!=-1 && getToken(1).toString().equals(";")&&flag==0)
          {
            projectionNodeConst = new ProjectionNode();
            projectionNodeConst.addColumn(new ProjectionNode.Column("EXPR",
                new ExprTree.ConstLeaf(Double.parseDouble(getToken(0).toString()))));
                projectionNodeConst.setChild(child_1);
               }
          else
          {  }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AS:
            A = jj_consume_token(AS);
            break;
          default:
            jj_la1[15] = jj_gen;
            ;
          }
          if( (getToken(2).toString()).equals(";"))
          {
          child_1 = new NullSourceNode(1);
          projectionNodeConst = new ProjectionNode();
           projectionNodeConst.addColumn(new ProjectionNode.Column(getToken(1).toString(),
                new ExprTree.ConstLeaf(Double.parseDouble(num.toString()))));
                 projectionNodeConst.setChild(child_1);
          }
         else
         {}
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TNAME:
            column = jj_consume_token(TNAME);
            break;
          default:
            jj_la1[16] = jj_gen;
            ;
          }
                        if(A!=null && column!=null && column.image.length()==1)
                        {
                          if(projectionNode==null)
                          {
                                projectionNode = new ProjectionNode();
                                projectionNode.setChild(nsNode);
                          }
                  projectionNode.addColumn(new ProjectionNode.Column(column.image, new ExprTree.ConstLeaf(Integer.parseInt(num.image))));
                        }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            jj_la1[17] = jj_gen;
            ;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNION:
          unionPresent = jj_consume_token(UNION);
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        if(uNode==null)
                uNode = new UnionNode();

        if(uNode.getLHS()==null && uNodeTop==null)
        {
                uNode.setLHS(projectionNode);
        }
        else if(uNode.getRHS()==null)
        {
           uNode.setRHS(projectionNode);
        }
        if(uNodeTop!=null && uNode.getLHS()==null)
        {
                  uNode.setLHS(uNodeTop);
        }

        if(unionPresent!=null && uNode.getLHS()!=null && uNode.getRHS()!=null)
        {
          uNodeTop = uNode;
          unionCount = unionCount+1;
                  uNode = new UnionNode();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JOIN:
        jj_consume_token(JOIN);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TNAME:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_11;
        }
        tabName = jj_consume_token(TNAME);
      ScanNode sNode2 = new ScanNode(tabName.image, tabName.image, tableQueryDetails.getTable().get(tabName.image));
      joinNode = new JoinNode();
      joinNode.setLHS(sNode1);
      joinNode.setRHS(sNode2);
      projectionNode.setChild(joinNode);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ON:
        jj_consume_token(ON);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TNAME:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_12;
        }
        t_c1 = jj_consume_token(TNAME);
        opcode = jj_consume_token(OPCODE);
        t_c2 = jj_consume_token(TNAME);
        String t1 = t_c1.image.split("\u005c\u005c.") [ 0 ];
        String t2 = t_c2.image.split("\u005c\u005c.") [ 0 ];
        String c1 = t_c1.image.split("\u005c\u005c.") [ 1 ];
        String c2 = t_c2.image.split("\u005c\u005c.") [ 1 ];
        if (opcode.image.equals("=")) selectionNode = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(t1, c1), new ExprTree.VarLeaf(t2, c2)));
        selectionNode.setChild(projectionNode.getChild());
        projectionNode.setChild(selectionNode);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TNAME:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_13;
        }
        t_c1 = jj_consume_token(TNAME);
        opcode = jj_consume_token(OPCODE);
        t_c2 = jj_consume_token(TNAME);
        String t1 = t_c1.image.split("\u005c\u005c.") [ 0 ];
        String t2 = t_c2.image.split("\u005c\u005c.") [ 0 ];
        String c1 = t_c1.image.split("\u005c\u005c.") [ 1 ];
        String c2 = t_c2.image.split("\u005c\u005c.") [ 1 ];
        if (opcode.image.equals("="))
                selectionNode = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(t1, c1), new ExprTree.VarLeaf(t2, c2)));
        selectionNode.setChild(projectionNode.getChild());
        projectionNode.setChild(selectionNode);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRA:
        jj_consume_token(OBRA);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TNAME:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_14;
        }
        tk1 = jj_consume_token(TNAME);
        op1 = jj_consume_token(OPCODE);
        tk2 = jj_consume_token(TNAME);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CBRA:
        jj_consume_token(CBRA);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        andOp = jj_consume_token(AND);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRA:
      case TNAME:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OBRA:
          jj_consume_token(OBRA);
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OBRA:
          jj_consume_token(OBRA);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        tk3 = jj_consume_token(TNAME);
        op2 = jj_consume_token(OPCODE);
        tk4 = jj_consume_token(TNAME);
        jj_consume_token(CBRA);
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        orOp = jj_consume_token(OR);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRA:
        jj_consume_token(OBRA);
        tk5 = jj_consume_token(TNAME);
        op3 = jj_consume_token(OPCODE);
        tk6 = jj_consume_token(TNAME);
        jj_consume_token(CBRA);
        jj_consume_token(CBRA);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
                if(andOp!=null && orOp!=null)
                {
                        String t1=tk1.image.split("\u005c\u005c.")[0];String c1=tk1.image.split("\u005c\u005c.")[1];
                        String t2=tk2.image.split("\u005c\u005c.")[0];String c2=tk2.image.split("\u005c\u005c.")[1];
                        String t3=tk3.image.split("\u005c\u005c.")[0];String c3=tk3.image.split("\u005c\u005c.")[1];
                        String t4=tk4.image.split("\u005c\u005c.")[0];String c4=tk4.image.split("\u005c\u005c.")[1];
                        String t5=tk5.image.split("\u005c\u005c.")[0];String c5=tk5.image.split("\u005c\u005c.")[1];
                        String t6=tk6.image.split("\u005c\u005c.")[0];String c6=tk6.image.split("\u005c\u005c.")[1];

                        if(op1!=null)
                        opcode1 = findOpcode(op1.image);

                        if(op2!=null)
                        opcode2 = findOpcode(op2.image);

                        if(op3!=null)
                        opcode3 = findOpcode(op3.image);

                        selectionNode = new SelectionNode(
                new ExprTree(ExprTree.OpCode.AND,
                                new ExprTree(opcode1,new ExprTree.VarLeaf(t1,c1), new ExprTree.VarLeaf(t2,c2)),
                                new ExprTree(ExprTree.OpCode.OR,
                                        new ExprTree(opcode2, new ExprTree.VarLeaf(t3,c3), new ExprTree.VarLeaf(t4,c4)),
                                        new ExprTree(opcode3, new ExprTree.VarLeaf(t5,c5), new ExprTree.VarLeaf(t6,c6)))));

                selectionNode.setChild(projectionNode.getChild());
                projectionNode.setChild(selectionNode);
                }
                else if(andOp!=null)
                {
                        String t1=tk1.image.split("\u005c\u005c.")[0];String c1=tk1.image.split("\u005c\u005c.")[1];
                        String t2=tk2.image.split("\u005c\u005c.")[0];String c2=tk2.image.split("\u005c\u005c.")[1];
                        String t3=tk3.image.split("\u005c\u005c.")[0];String c3=tk3.image.split("\u005c\u005c.")[1];
                        String t4=tk4.image.split("\u005c\u005c.")[0];String c4=tk4.image.split("\u005c\u005c.")[1];

                        if(op1!=null)
                        opcode1 = findOpcode(op1.image);

                        if(op2!=null)
                        opcode2 = findOpcode(op2.image);

                        selectionNode = new SelectionNode(
                          new ExprTree(ExprTree.OpCode.AND,
                          new ExprTree(opcode1, new ExprTree.VarLeaf(t1,c1), new ExprTree.VarLeaf(t2,c2)),
                          new ExprTree(opcode2, new ExprTree.VarLeaf(t3,c3), new ExprTree.VarLeaf(t4,c4))));

                        selectionNode.setChild(projectionNode.getChild());
                projectionNode.setChild(selectionNode);
                }
      jj_consume_token(SEMICOLON);
          if(uNode!=null && unionCount >0)
          {
            if(uNode.getLHS()==null || uNode.getRHS()==null)
                        tableQueryDetails.getQ().add(uNodeTop);
                else if(uNode.getLHS()!=null && uNode.getRHS()!=null)
                        tableQueryDetails.getQ().add(uNode);
         }
          else if(projectionNode!=null)
        tableQueryDetails.getQ().add(projectionNode);
      else if(projectionNodeConst!=null)
                tableQueryDetails.getQ().add(projectionNodeConst);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(0);
    {if (true) return tableQueryDetails;}
    throw new Error("Missing return statement in function");
  }

  //end of Start method
  static final public Schema.TableFromFile openbracket(String tableName) throws ParseException {
  Schema.TableFromFile table;
    jj_consume_token(TNAME);
    jj_consume_token(OBRA);
    String col1 = getToken(1).toString();
    String col2 = getToken(4).toString();
    table = callfrom();
    table.add(new Schema.Column(tableName, col1, Schema.Type.INT));
    table.add(new Schema.Column(tableName, col2, Schema.Type.INT));
    {if (true) return table;}
    throw new Error("Missing return statement in function");
  }

  static final public Schema.TableFromFile callfrom() throws ParseException {
  Schema.TableFromFile table;
    jj_consume_token(TNAME);
    jj_consume_token(TNAME);
    jj_consume_token(COMMA);
    jj_consume_token(TNAME);
    jj_consume_token(TNAME);
    jj_consume_token(CBRA);
    jj_consume_token(FROM);
    jj_consume_token(TNAME);
    table = callforfilename();
    {if (true) return table;}
    throw new Error("Missing return statement in function");
  }

  static final public Schema.TableFromFile callforfilename() throws ParseException {
  Schema.TableFromFile table;
    jj_consume_token(APOS);
    jj_consume_token(TNAME);
    table = new Schema.TableFromFile(new File((getToken(0)).toString()));
    jj_consume_token(APOS);
    jj_consume_token(TNAME);
    jj_consume_token(TNAME);
    jj_consume_token(SEMICOLON);
    {if (true) return table;}
    throw new Error("Missing return statement in function");
  }

  static final public AggregateNode aggregateTest(String aggStr, TableQueryDetails tableQueryDetails) throws ParseException {
  AggregateNode anode =new AggregateNode();
  JoinNode joinNode=null;
  JoinNode joinNodeTop=null;
  SelectionNode selectionNode= null;
  Token column = null;
  Token column2=null;
  Token tabName;
  Token nd=null;
  Token av=null;
  Token opc=null;
  String ave=null;
   ScanNode sNode1;
   String t1=null;
   String t2=null;
   String t3=null;
   String t4=null;
   String c1=null;
   String c2=null;
   String c3=null;
   String c4=null;
   Token t_c1=null, t_c2=null, opcode=null;
   Token t_c3=null, t_c4=null;
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRA:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_15;
      }
      jj_consume_token(OBRA);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TNAME:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_16;
        }
        column = jj_consume_token(TNAME);

      }
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPCODE:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_17;
        }
        opc = jj_consume_token(OPCODE);

      }
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TNAME:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_18;
        }
        column2 = jj_consume_token(TNAME);

      }
        if(opc==null)
        {

          try
      {


                        if(aggStr.equalsIgnoreCase("SUM"))
                        {
                        if(column.image.contains("*"))
                        {
                          String colmn1=column.image.split("\u005c\u005c*")[0];
                          String colmn2=column.image.split("\u005c\u005c*")[1];
                          anode.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null, colmn1), new ExprTree.VarLeaf(null, colmn2)),AggregateNode.AType.SUM));

                        }
                        else
                anode.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree.VarLeaf(null, column.image),AggregateNode.AType.SUM));
            }
                        else if(aggStr.equalsIgnoreCase("AVG"))
                anode.addAggregate(new AggregateNode.AggColumn("Average", new ExprTree.VarLeaf(null, column.image),AggregateNode.AType.AVG));

                else if(aggStr.equalsIgnoreCase("MIN"))
                anode.addAggregate(new AggregateNode.AggColumn("Min", new ExprTree.VarLeaf(null, column.image),AggregateNode.AType.MIN));

                else if(aggStr.equalsIgnoreCase("MAX"))
                anode.addAggregate(new AggregateNode.AggColumn("Max", new ExprTree.VarLeaf(null, column.image),AggregateNode.AType.MAX));

                else if(aggStr.equalsIgnoreCase("COUNT"))
                {
                 anode.addAggregate(new AggregateNode.AggColumn("Count", new ExprTree.ConstLeaf(1),AggregateNode.AType.COUNT));
                        }

}catch(Exception e)
{
  e.printStackTrace();
}

        }
else
{

try
      {

                        if(aggStr.equalsIgnoreCase("SUM"))
                        {
                          if(opc.image.equals("+"))
                anode.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null, column.image), new ExprTree.VarLeaf(null, column2.image)),AggregateNode.AType.SUM));

                        else if(opc.image.equals("*"))
                        anode.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null, column.image), new ExprTree.VarLeaf(null, column2.image)),AggregateNode.AType.SUM));

                        }
                else if(aggStr.equalsIgnoreCase("AVG"))
                anode.addAggregate(new AggregateNode.AggColumn("Average", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null, column.image), new ExprTree.VarLeaf(null, column2.image)),AggregateNode.AType.AVG));

}catch(Exception e)
{
  e.printStackTrace();
}

}
      jj_consume_token(CBRA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TNAME:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_19;
        }
        av = jj_consume_token(TNAME);
          aggStr=av.image;
      }

    }
    jj_consume_token(FROM);
    tabName = jj_consume_token(TNAME);
                 sNode1 = new ScanNode(tabName.image, tabName.image, tableQueryDetails.getTable().get(tabName.image));
                        anode.setChild(sNode1);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_20;
      }
      jj_consume_token(COMMA);
      tabName = jj_consume_token(TNAME);
      ScanNode sNode2 = new ScanNode(tabName.image, tabName.image, tableQueryDetails.getTable().get(tabName.image));
        joinNode = new JoinNode();
                        if(joinNodeTop==null)
                joinNode.setLHS(sNode1);
            else
                joinNode.setLHS(joinNodeTop);
                joinNode.setRHS(sNode2);
                        anode.setChild(joinNode);
                        joinNodeTop=joinNode;
    }
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_21;
      }
      jj_consume_token(WHERE);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OBRA:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_22;
        }
        jj_consume_token(OBRA);
      }
      t_c1 = jj_consume_token(TNAME);
      t1 = t_c1.image.split("\u005c\u005c.")[0];
      c1 = t_c1.image.split("\u005c\u005c.")[1];
      opcode = jj_consume_token(OPCODE);

      t_c2 = jj_consume_token(TNAME);
        t2 = t_c2.image.split("\u005c\u005c.")[0];
        c2 = t_c2.image.split("\u005c\u005c.")[1];
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CBRA:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_23;
        }
        jj_consume_token(CBRA);
      }
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_24;
        }
        nd = jj_consume_token(AND);

      }
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OBRA:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_25;
        }
        jj_consume_token(OBRA);
      }
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TNAME:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_26;
        }
        t_c3 = jj_consume_token(TNAME);
      t3 = t_c3.image.split("\u005c\u005c.")[0];
      c3 = t_c3.image.split("\u005c\u005c.")[1];
      }
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPCODE:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_27;
        }
        jj_consume_token(OPCODE);

      }
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TNAME:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_28;
        }
        t_c4 = jj_consume_token(TNAME);
        t4 = t_c4.image.split("\u005c\u005c.")[0];
        c4 = t_c4.image.split("\u005c\u005c.")[1];
      }
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CBRA:
          ;
          break;
        default:
          jj_la1[50] = jj_gen;
          break label_29;
        }
        jj_consume_token(CBRA);
      }
  if(opcode.image.equals("=") && nd==null)
           {
              selectionNode = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(t1, c1), new ExprTree.VarLeaf(t2, c2)));
            selectionNode.setChild(anode.getChild());
          }
else
{
  selectionNode = new SelectionNode(new ExprTree(ExprTree.OpCode.AND, new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(t1, c1), new ExprTree.VarLeaf(t2, c2)), new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(t3, c3), new ExprTree.VarLeaf(t4, c4))));
        selectionNode.setChild(anode.getChild());
}
          anode.setChild(selectionNode);
    }
  {if (true) return anode;}
    throw new Error("Missing return statement in function");
  }

  static final public ExprTree.OpCode findOpcode(String op) throws ParseException {
          if(op.equals("="))
                {if (true) return ExprTree.OpCode.EQ;}
        else if(op.equals("<"))
                {if (true) return ExprTree.OpCode.LT;}
        else if(op.equals(">"))
                {if (true) return ExprTree.OpCode.GT;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SyntaxCheckerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[51];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x43b03c0,0x40,0x2240000,0x2000000,0x240000,0x2000000,0x1000000,0x8000,0x200000,0x1000000,0x800,0x1000,0x2000,0x400000,0x400,0x200000,0x1000000,0x4000,0x80,0x200000,0x100,0x200000,0x200,0x200000,0x80000,0x200000,0x100000,0x10000,0x80000,0x80000,0x280000,0x20000,0x80000,0x4000000,0x80000,0x200000,0x10000000,0x200000,0x1000000,0x200000,0x1000000,0x200,0x80000,0x100000,0x10000,0x80000,0x200000,0x10000000,0x200000,0x100000,};
   }

  /** Constructor with InputStream. */
  public SyntaxChecker(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SyntaxChecker(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SyntaxCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SyntaxChecker(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SyntaxCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SyntaxChecker(SyntaxCheckerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SyntaxCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 51; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
